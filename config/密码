医院编码：
万科云城：wanke
南方医科大学深圳医院：nanyida，
南方科技大学医院：nankeda
徐州坎德拉：xuzhou-candela 
彭州市人民医院：pz120
徐州机器人体验馆：xuzhou-robot-experience
江都区小纪中心卫生院：扬州市江都区小纪中心卫生院
江都区真武中心卫生院：扬州市江都区真武中心卫生院
江都区滨江人民医院：扬州市江都区滨江人民医院
江都妇幼保健院：扬州市江都妇幼保健院
江都中医院：扬州市江都中医院

扬州市江都区妇幼保健院

encrypt.key
2HIK)'d&+}iIA0eBz2hMBClWy>9,%(

'

-Xms200m -Xmx400m -XX:+HeapDumpOnOutOfMemoryError
-Dspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848 -Dspring.cloud.nacos.config.server-addr=192.168.100.66:8858

docker pull nacos/nacos-server:2.0.4

docker run --name nacos -d -p 8848:8848  -p 9848:9848 -p 9849:9849 --privileged=true --restart=always -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -e PREFER_HOST_MODE=hostname  -v /Users/cti/soft/docker/nacos/application.properties:/d/docker/nacos/conf/application.properties nacos/nacos-server

领域建模
领域事件
事件驱动
状态机
领域服务
业务边界



医院编码：
万科云城：e90d7310-959c-4948-bf09-c67e93600848
南方医科大学深圳医院：d56c4a26-9adc-4280-bdae-b3d531319491
南方科技大学医院：cefbcf55-f582-4609-8803-dc4b4f6b3607
徐州坎德拉：56c65e90-195e-45da-bbef-0a856f40b06e
彭州市人民医院：3f75f7b4-10af-403d-bdbe-89dae17c6549
徐州机器人体验馆：ad0aece3-6520-4b2e-b038-4a5b0ddcb57c
江都区小纪中心卫生院：2b26aafb-00c1-480c-ab96-a65b85dffd87
江都区真武中心卫生院：0a18321a-d429-41d4-b2a6-761be4103e5d
江都区滨江人民医院：e460406c-325b-4fc1-b59b-0791ac13b67a
江都妇幼保健院：77523c75-5cbd-4fcc-b410-03f187c1d537
江都中医院：7ac4c7b2-7258-406a-b9f7-407a3f87f1f0
 

（4）当前需要更新的

天安云谷id：8e530a0b-5eca-4440-a03a-307cb6bb9005

--站点id：88705855
天安云谷五栋id：e296745d-9873-402e-b1f3-dd6d5b7fc737

--站点id：88705856


db.getCollection('logistics_order_trace').createIndex({"orderId":1})
db.getCollection('delivery_user_address').createIndex({"mobile":1,"houseNumberId":1,"deleted":1})


ALTER TABLE "hospital_department" ADD "department_code" int8;

ALTER TABLE "hospital_setting" ADD "pick_up_arrival_wait" int4;

ALTER TABLE "hospital_setting" ADD "rf_id_validate_disabled" bool;

修改字段类型
ALTER TABLE "hospital_department" ALTER COLUMN "department_code" TYPE int8;


https://jumpserver.ctirobot.com/luna/?_=1615951169099

生产：kafka-console-producer.sh --broker-list 172.16.20.194:31980,172.16.20.193:31980,172.16.20.195:31980  --topic queue.status.change 

消费：kafka-console-consumer.sh   --bootstrap-server 172.16.20.194:31980,172.16.20.195:31980,172.16.20.193:31980 --topic queue.status.change  --from-beginning 可查看kafka里的消息

kafka-console-producer.sh --broker-list kafka-1.kafka-headless.middleware.svc.company-schedulev2-cluster:9092 --topic mqtt-status-update-development

kafka-console-consumer.sh --bootstrap-server kafka.middleware.svc.company-schedulev2-cluster:9092 --topic mqtt-status-update-development --from-beginning

kafka-console-producer.sh --broker-list kafka-1.kafka-headless.middleware.svc.company-schedulev2-cluster:9092 --topic mqtt-status-update-development

queue.command.notify

2.25升级
ALTER TABLE "common_waypoint" ADD "disabled" bool;

ALTER TABLE "hospital_setting" ADD "play_music" bool;

alter table hospital_deparment add clean_base_position_id varchar(255);
alter table hospital_deparment add dirty_base_position_id varchar(255);



git rebase release/0.15.x
git rebase --continue
git log
git push -f 



------
3.17 新加sql
INSERT INTO "medical"."saas_zone_authority" ("id", "created_by", "created_time", "deleted", "deleted_by", "deleted_time", "last_modified_by", "last_modified_time", "application_type", "level", "menu_type", "name", "path", "parent_authority_id") VALUES ('a55874ee-45f0-4db5-84b3-cdf494662d04', '0dc8efd2-ead1-4949-9aba-8d0aee23ee4b', 1646624033901, 'f', NULL, NULL, '0dc8efd2-ead1-4949-9aba-8d0aee23ee4b', 1646624033901, 0, 1, 0, '消毒模式', '/sterilization', NULL);
INSERT INTO "medical"."saas_zone_authority" ("id", "created_by", "created_time", "deleted", "deleted_by", "deleted_time", "last_modified_by", "last_modified_time", "application_type", "level", "menu_type", "name", "path", "parent_authority_id") VALUES ('d42e5862-7b12-424b-a398-423a8b3bdba5', '0dc8efd2-ead1-4949-9aba-8d0aee23ee4b', 1646624072271, 'f', NULL, NULL, '0dc8efd2-ead1-4949-9aba-8d0aee23ee4b', 1646624072271, 0, 1, 0, '配送模式', '/delivery', NULL);


ALTER TABLE "hospital_setting" ADD "play_music" bool;


db.getCollection("transitRequest").createIndex({
    expiryTime: NumberInt("1")
}, {
    name: "expiryTime",
    background: true,
    sparse: true,
    expireAfterSeconds: NumberInt("1")
});

db.getCollection("transitRequestHistory").createIndex({
    expiryTime: NumberInt("1")
}, {
    name: "expiryTime",
    background: true,
    sparse: true,
    expireAfterSeconds: NumberInt("1")
});


kafka  :
状态上报
group: mqtt-cleaning-consumer-group
destination: mqtt-cleaning-status-update-development

指令上报
group: mqtt-cleaning-consumer-group
destination: mqtt-cleaning-command-update-development

任务上报
group: mqtt-cleaning-consumer-group
destination: mqtt-cleaning-task-status-update-development


mqtt
状态上报topic: cleaning-device-status-update-development
指令上报topic:  cleaning-command-update-development  
任务上报topci：cleaning-task-status-update-development


指令下发topic: cleaning-command-development  



kafka  :
状态上报
group: mqtt-cleaning-consumer-group
destination: mqtt-cleaning-status-update-staging

指令上报
group: mqtt-cleaning-consumer-group
destination: mqtt-cleaning-command-update-staging

任务上报
group: mqtt-cleaning-consumer-group
destination: mqtt-cleaning-task-status-update-staging


mqtt
状态上报topic: cleaning-device-status-update-staging
指令上报topic:  cleaning-command-update-staging  
任务上报topci：cleaning-task-status-update-staging


指令下发topic: cleaning-command-staging

-staging


kafka-console-producer.sh --broker-list 172.168.201.27:30179,172.168.201.28:30179,172.168.201.29:30179  --topic mqtt-cleaning-status-update-development {"id":"049149ea-0461-4dcc-80b9-e946fd3cb895","deviceType":"ROBOT","deviceStatus":"INITIALIZATION","deviceBehaviour":"SELF_CHECK","timestamp":"7498327437965","parkId":"3244f85e-07a7-41f2-8daf-8d15edc6346f"}


kafka-console-producer.sh --broker-list 120.78.237.140:9092  --topic mqtt-cleaning-status-update-development {"id":"049149ea-0461-4dcc-80b9-e946fd3cb895","deviceType":"CLEANING_ROBOT","deviceStatus":"INITIALIZATION","deviceBehaviour":"SELF_CHECK","timestamp":"7498327437965","parkId":"3244f85e-07a7-41f2-8daf-8d15edc6346f"}



kafka-console-consumer.sh   --bootstrap-server 172.168.201.27:30179,172.168.201.28:30179,172.168.201.29:30179 --topic mqtt-cleaning-status-update-development  --from-beginning




生产：kafka-console-producer.sh --broker-l ist 172.16.20.194:31980,172.16.20.193:31980,172.16.20.195:31980  --topic mqtt-cleaning-status-update-staging

消费：kafka-console-consumer.sh   --bootstrap-server 172.16.20.194:31980,172.16.20.195:31980,172.16.20.193:31980 --topic mqtt-cleaning-status-update-staging  --from-beginning

{"apiKey":"service-client","keyType":"MASTER","entityId":"cleaning-platform","readOnly":false,"activated":true,"deleted":false}

{"apiKey":"service-client","keyType":"MASTER","entityId":"medical-service","readOnly":false,"activated":true,"deleted":false}


@NotNull
适用于基本数据类型(Integer，Long，Double等等)，当 @NotNull 注解被使用在 String 类型的数据上，则表示该数据不能为 Null（但是可以为 Empty）
@NotBlank
适用于 String 类型的数据上，加了@NotBlank 注解的参数不能为 Null 且 trim() 之后 size > 0
@NotEmpty
适用于 String、Collection集合、Map、数组等等，加了@NotEmpty 注解的参数不能为 Null 或者 长度为 0

Spring内部是一个放置Bean的IoC容器，通过依赖注入的方式处理Bean之间的依赖关系。

4.13
SecurityContextHolder 获取当前token
RequestContextHolder 获取当前token
账户在3方创建后到uaa的注册场景
AOTH2
/oauth/token
重写token获取
自定义设备token的获取
主要的2个步骤：
1.TokenEndpoint-》CompositeTokenGranter-》AbstractTokenGranter
2.grant_type = "device" 用grant_type去进行处理对象选择后，再去校验数据生成token

4.14
账户登陆后修改密码，解析自定义注解@Authorized和服务间访问token请求访问uaa和gateway新老版本的区别，

4.15
MQTT和消息队列的区别#
消息队列可以存储消息，直到被消费为止

消息队列只能被消费处理一次，不像MQTT订阅的人都可以收到消息

消息队列需要先创建队列，MQTT可以使用时候创建

MQTT是一种通信协议，MQ是消息通道

MQTT面向海量设备连接、MQ是面向海量数据

cap理论
1.满足CA舍弃P,也就是满足一致性和可用性,舍弃容错性。但是这也就意味着你的系统不是分布式的了,因为涉及分布式的想法就是把功能分开,部署到不同的机器上。
2.满足CP舍弃A,也就是满足一致性和容错性,舍弃可用性。如果你的系统允许有段时间的访问失效等问题,这个是可以满足的。就好比多个人并发买票,后台网络出现故障,你买的时候系统就崩溃了。
3.满足AP舍弃C,也就是满足可用性和容错性,舍弃一致性。这也就是意味着你的系统在并发访问的时候可能会出现数据不一致的情况。

死信的几种来源：
消息 TTL 过期（time to live，存活时间，可以用在限时支付消息）
队列达到最大长度（队列满了，无法路由到该队列）
消息被拒绝（ basic.reject / basic.nack ），并且 requeue = false

阻塞队列：
用来做生产和消费

  k8s api server

  apollo


